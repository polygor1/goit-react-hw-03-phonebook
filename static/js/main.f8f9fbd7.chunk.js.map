{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","INITIAL_STATE","id","name","number","ContactForm","state","inputId","nanoid","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","styles","form","htmlFor","type","pattern","title","required","onChange","Component","ContactListItem","li","item","button","onClick","onDeleteContact","ContactList","ul","contacts","map","Filter","filter","input","App","formSubmitHandler","data","nextName","toLowerCase","length","contact","alert","changeFilter","deleteContact","targetId","prevState","getVisibleContact","normalizedFilter","includes","localStorage","getItem","parseContacts","JSON","parse","prevProps","setItem","stringify","visbleContact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,MAAQ,wB,mBCAxFD,EAAOC,QAAU,CAAC,KAAO,4B,0LCInBC,EAAgB,CACpBC,GAAI,GACJC,KAAM,GACNC,OAAQ,IAGGC,EAAb,4MACEC,MADF,eACeL,GADf,EAGEM,QAAUC,cAHZ,EAKEC,aAAe,SAAAC,GAEb,MAAwBA,EAAMC,cAAtBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBV,EAAOS,KAR5B,EAWEE,aAAe,SAAAJ,GAEbA,EAAMK,iBACN,EAAKC,MAAMC,SAAX,eAAyB,EAAKX,QAC9B,EAAKY,SAfT,EAkBEA,MAAQ,WAEN,EAAKL,SAAL,eAAmBZ,KApBvB,4CAuBE,WACE,OACE,uBAAMgB,SAAUE,KAAKL,aAAcM,UAAWC,IAAOC,KAArD,UACE,wBAAOC,QAASJ,KAAKZ,QAArB,UACE,sCACA,uBACEL,GAAIiB,KAAKZ,QACTiB,KAAK,OACLrB,KAAK,OACLsB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRf,MAAOO,KAAKb,MAAMH,KAClByB,SAAUT,KAAKV,eAEjB,wCACA,uBACEP,GAAIiB,KAAKZ,QACTiB,KAAK,MACLrB,KAAK,SACLsB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRf,MAAOO,KAAKb,MAAMF,OAClBwB,SAAUT,KAAKV,kBAGnB,wBAAQe,KAAK,SAAb,gCAlDR,GAAiCK,a,gBCPpBC,EAAb,4JACE,WAAU,IAAD,OACP,OACE,qBAAIV,UAAWC,IAAOU,GAAtB,UACGZ,KAAKH,MAAMgB,KAAK7B,KADnB,KAC2BgB,KAAKH,MAAMgB,KAAK5B,OACzC,wBACEgB,UAAWC,IAAOY,OAClBT,KAAK,SACLU,QAAS,kBAAM,EAAKlB,MAAMmB,gBAAgB,EAAKnB,MAAMgB,KAAK9B,KAH5D,2BALR,GAAqC2B,aCCxBO,EAAb,4JACE,WAAU,IAAD,OACP,OACE,oBAAIhB,UAAWC,IAAOgB,GAAtB,SACGlB,KAAKH,MAAMsB,SAASC,KAAI,SAAAP,GAAI,OAC3B,cAAC,EAAD,CAEEA,KAAMA,EACNG,gBAAiB,EAAKnB,MAAMmB,iBAFvBH,EAAK9B,aANtB,GAAiC2B,a,iBCgBlBW,EAjBA,SAAC,GAAD,IAAG5B,EAAH,EAAGA,MAAOgB,EAAV,EAAUA,SAAV,OACb,wBAAOR,UAAWC,IAAOoB,OAAzB,UACE,oBAAIrB,UAAWC,IAAOK,MAAtB,mCACA,uBACEN,UAAWC,IAAOqB,MAClBlB,KAAK,OACLZ,MAAOA,EACPgB,SAAUA,QCFVe,E,4MACJrC,MAAQ,CACNgC,SAAU,CACR,CAAEpC,GAAI,OAAQC,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEF,GAAI,OAAQC,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEF,GAAI,OAAQC,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEF,GAAI,OAAQC,KAAM,iBAAkBC,OAAQ,cAEhDqC,OAAQ,I,EAmBVG,kBAAoB,SAAAC,GAClB,IAAMC,EAAWD,EAAK1C,KAAK4C,cAE3B,GAEgB,IADd,EAAKzC,MAAMgC,SAASG,QAAO,SAAAT,GAAI,OAAIA,EAAK7B,KAAK4C,gBAAkBD,KAC5DE,OACH,CAEAH,EAAK3C,GAAKM,cACV,IAAMyC,EAAO,eAAQJ,GACrB,EAAKhC,UAAS,gBAAGyB,EAAH,EAAGA,SAAH,MAAmB,CAC/BA,SAAS,CAAEW,GAAH,mBAAeX,aAIzBY,MAAML,EAAK1C,KAAO,4B,EAItBgD,aAAe,SAAAzC,GAEb,EAAKG,SAAS,CAAE4B,OAAQ/B,EAAMC,cAAcC,S,EAG9CwC,cAAgB,SAAAC,GAEd,EAAKxC,UAAS,SAAAyC,GAAS,MAAK,CAC1BhB,SAAUgB,EAAUhB,SAASG,QAAO,SAAAQ,GAAO,OAAIA,EAAQ/C,KAAOmD,U,EAIlEE,kBAAoB,WAClB,MAA6B,EAAKjD,MAA1BmC,EAAR,EAAQA,OAAQH,EAAhB,EAAgBA,SACVkB,EAAmBf,EAAOM,cAEhC,OAAOT,EAASG,QAAO,SAAAQ,GAAO,OAC5BA,EAAQ9C,KAAK4C,cAAcU,SAASD,O,uDApDxC,WAEE,IAAMlB,EAAWoB,aAAaC,QAAQ,YAChCC,EAAgBC,KAAKC,MAAMxB,GAE7BsB,GACFzC,KAAKN,SAAS,CAAEyB,SAAUsB,M,gCAI9B,SAAmBG,EAAWT,GAExBA,EAAUhB,WAAanB,KAAKb,MAAMgC,UACpCoB,aAAaM,QAAQ,WAAYH,KAAKI,UAAU9C,KAAKb,MAAMgC,a,oBA2C/D,WACE,IAAQG,EAAWtB,KAAKb,MAAhBmC,OACFyB,EAAgB/C,KAAKoC,oBAE3B,OACE,sBAAKnC,UAAU,MAAf,UACE,4DACA,cAAC,EAAD,CAAaH,SAAUE,KAAKyB,oBAC5B,oBAAIxB,UAAU,QAAd,wBACA,cAAC,EAAD,CAAQR,MAAO6B,EAAQb,SAAUT,KAAKgC,eACtC,cAAC,EAAD,CACEb,SAAU4B,EACV/B,gBAAiBhB,KAAKiC,uB,GA/EdvB,aAsFHc,IC3FfwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCP1BxE,EAAOC,QAAU,CAAC,GAAK,wBAAwB,GAAK,wBAAwB,OAAS,+B","file":"static/js/main.f8f9fbd7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1gSIf\",\"title\":\"Filter_title__3R3n0\",\"input\":\"Filter_input__1_zpm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3P3WU\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\n\nconst INITIAL_STATE = {\n  id: '',\n  name: '',\n  number: '',\n};\n\nexport class ContactForm extends Component {\n  state = { ...INITIAL_STATE };\n\n  inputId = nanoid();\n\n  handleChange = event => {\n    // отображалка для поля ввода\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    // отсылалка данных из полей формы\n    event.preventDefault();\n    this.props.onSubmit({ ...this.state });\n    this.reset();\n  };\n\n  reset = () => {\n    // опустошалка полей ввода\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.form}>\n        <label htmlFor={this.inputId}>\n          <h2>Name</h2>\n          <input\n            id={this.inputId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n          <h2>Number</h2>\n          <input\n            id={this.inputId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\n\nexport class ContactListItem extends Component {\n  render() {\n    return (\n      <li className={styles.li}>\n        {this.props.item.name}: {this.props.item.number}\n        <button\n          className={styles.button}\n          type=\"button\"\n          onClick={() => this.props.onDeleteContact(this.props.item.id)}\n        >\n          Delete\n        </button>\n      </li>\n    );\n  }\n}\n\nContactListItem.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\nimport { ContactListItem } from './ContactListItem';\n\nexport class ContactList extends Component {\n  render() {\n    return (\n      <ul className={styles.ul}>\n        {this.props.contacts.map(item => (\n          <ContactListItem\n            key={item.id}\n            item={item}\n            onDeleteContact={this.props.onDeleteContact}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\n// <li key={item.id} className={styles.li}>\n//   {item.name}: {item.number}\n//   <button\n//     className={styles.button}\n//     type=\"button\"\n//     onClick={() => this.props.onDeleteContact(item.id)}\n//   >\n//     Delete\n//   </button>\n// </li>;\n","import styles from './Filter.module.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={styles.filter}>\n    <h3 className={styles.title}> Find contact by name</h3>\n    <input\n      className={styles.input}\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import './App.css';\n\nimport { Component } from 'react';\nimport { ContactForm } from './components/ContactForm/ContactForm';\nimport { ContactList } from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nimport { nanoid } from 'nanoid';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    // читаем данные из localStorage\n    const contacts = localStorage.getItem('contacts');\n    const parseContacts = JSON.parse(contacts);\n    // если они там есть ;)\n    if (parseContacts) {\n      this.setState({ contacts: parseContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // если данные изменились пишем всех в localStorage\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n  formSubmitHandler = data => {\n    const nextName = data.name.toLowerCase();\n    // проверка на совпадение с БД\n    if (\n      this.state.contacts.filter(item => item.name.toLowerCase() === nextName)\n        .length === 0\n    ) {\n      // заносим в БД новенького\n      data.id = nanoid();\n      const contact = { ...data };\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n    } else {\n      // или ругаемся\n      alert(data.name + ' is already in contacts');\n    }\n  };\n\n  changeFilter = event => {\n    // вносим строку поиска в this.state.filter\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  deleteContact = targetId => {\n    // создаем новый массив БД без элемента с выбранным ID (типа удаляем выбранный ID)\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== targetId),\n    }));\n  };\n\n  getVisibleContact = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    // ищем контакты в БД по имени из this.state.filter\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visbleContact = this.getVisibleContact();\n\n    return (\n      <div className=\"App\">\n        <h1>goit-react-hw-03-phonebook</h1>\n        <ContactForm onSubmit={this.formSubmitHandler} />\n        <h2 className=\"title\"> Contacts </h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList\n          contacts={visbleContact}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ul\":\"ContactList_ul__2JHuS\",\"li\":\"ContactList_li__2e-NX\",\"button\":\"ContactList_button__3kzNR\"};"],"sourceRoot":""}